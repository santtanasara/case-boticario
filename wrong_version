{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Instalação do request para execução da chamada.\n",
        "Chamada na API para trazer o token de acesso ao spotify\n"
      ],
      "metadata": {
        "id": "7_K9RzAeUy-3"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A73trqi5UlQ4"
      },
      "outputs": [],
      "source": [
        "import requests\n",
        "\n",
        "# URL para obtenção do token de acesso\n",
        "url = \"https://accounts.spotify.com/api/token\"\n",
        "\n",
        "# Parâmetros da requisição\n",
        "payload = {\n",
        "    \"grant_type\": \"client_credentials\",\n",
        "    \"client_id\": \"e15cf346e3b0442c8d49bc021abb9445\",\n",
        "    \"client_secret\": \"826af27bd99a43f1a7964e72277e7760\"\n",
        "}\n",
        "\n",
        "# Faz a requisição POST\n",
        "response = requests.post(url, data=payload)\n",
        "\n",
        "# Verifica se a requisição foi bem-sucedida (código de status 200)\n",
        "if response.status_code == 200:\n",
        "    # Obtém o token de acesso da resposta em formato JSON\n",
        "    data = response.json()\n",
        "    access_token = data[\"access_token\"]\n",
        "    token_type = data[\"token_type\"]\n",
        "    # Aqui você pode usar o token de acesso para fazer outras requisições ao Spotify\n",
        "    # por exemplo, pesquisar podcasts, acessar playlists, etc.\n",
        "else:\n",
        "    # Caso ocorra algum erro na requisição, exibe o código de status\n",
        "    print(\"Erro na requisição:\", response.status_code)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(data)"
      ],
      "metadata": {
        "id": "ScuyhGEeVDO5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "Busca pelo ID do podcast para seguir com o request"
      ],
      "metadata": {
        "id": "PRYLpezUVHJv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "\n",
        "link = \"https://open.spotify.com/show/1oMIHOXsrLFENAeM743g93?si=2994730935fe4877&nd=1\"\n",
        "\n",
        "# Extrair o ID do podcast usando expressões regulares\n",
        "pattern = r\"show\\/(\\w+)\"\n",
        "match = re.search(pattern, link)\n",
        "\n",
        "if match:\n",
        "    podcast_id = match.group(1)\n",
        "    print(\"ID do podcast:\", podcast_id)\n",
        "else:\n",
        "    print(\"Não foi possível encontrar o ID do podcast.\")"
      ],
      "metadata": {
        "id": "MHl24Fz5VGDN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Trazendo os dados do podcast"
      ],
      "metadata": {
        "id": "K67V8JcgVV87"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "\n",
        "def get_show(show_id, market):\n",
        "    url = f\"https://api.spotify.com/v1/shows/1oMIHOXsrLFENAeM743g93\"\n",
        "    headers = {\n",
        "        \"Authorization\": \"Bearer BQAWwAwsFzAlKNxAK4LonAZyTpNwZo2QssfblDcU1_Hj4h7brb_P_QrT4ZmNnp6_MXUjLM_HiaTVRuU_i2dPkrzRZelTt9lgnZ6KLpIKSFXYOLReTZNd\"\n",
        "    }\n",
        "    params = {\n",
        "        \"market\": market\n",
        "    }\n",
        "    response = requests.get(url, headers=headers, params=params)\n",
        "    data = response.json()\n",
        "\n",
        "    # Check if the request was successful\n",
        "    if response.status_code == 200:\n",
        "        available_markets = data.get(\"available_markets\", [])\n",
        "        copyrights = data.get(\"copyrights\", [])\n",
        "        description = data.get(\"description\", \"\")\n",
        "        html_description = data.get(\"html_description\", \"\")\n",
        "        explicit = data.get(\"explicit\", False)\n",
        "        external_urls = data.get(\"external_urls\", {})\n",
        "        href = data.get(\"href\", \"\")\n",
        "        show_id = data.get(\"id\", \"\")\n",
        "        images = data.get(\"images\", [])\n",
        "        is_externally_hosted = data.get(\"is_externally_hosted\", False)\n",
        "        languages = data.get(\"languages\", [])\n",
        "        media_type = data.get(\"media_type\", \"\")\n",
        "        name = data.get(\"name\", \"\")\n",
        "        publisher = data.get(\"publisher\", \"\")\n",
        "        show_type = data.get(\"type\", \"\")\n",
        "        uri = data.get(\"uri\", \"\")\n",
        "        total_episodes = data.get(\"total_episodes\", 0)\n",
        "        episodes = data.get(\"episodes\", [])\n",
        "        \n",
        "\n",
        "        # Print the show information\n",
        "        print(\"Available Markets:\", available_markets)\n",
        "        print(\"Copyrights:\", copyrights)\n",
        "        print(\"Description:\", description)\n",
        "        print(\"HTML Description:\", html_description)\n",
        "        print(\"Explicit:\", explicit)\n",
        "        print(\"External URLs:\", external_urls)\n",
        "        print(\"Href:\", href)\n",
        "        print(\"Show ID:\", show_id)\n",
        "        print(\"Images:\", images)\n",
        "        print(\"Externally Hosted:\", is_externally_hosted)\n",
        "        print(\"Languages:\", languages)\n",
        "        print(\"Media Type:\", media_type)\n",
        "        print(\"Name:\", name)\n",
        "        print(\"Publisher:\", publisher)\n",
        "        print(\"Type:\", show_type)\n",
        "        print(\"URI:\", uri)\n",
        "        print(\"Total Episodes:\", total_episodes)\n",
        "        print(\"Episodes:\", episodes)\n",
        "    else:\n",
        "        print(\"Error in the request:\", response.status_code)\n",
        "\n",
        "# Specify your access token and the required parameters\n",
        "access_token = \"BQAWwAwsFzAlKNxAK4LonAZyTpNwZo2QssfblDcU1_Hj4h7brb_P_QrT4ZmNnp6_MXUjLM_HiaTVRuU_i2dPkrzRZelTt9lgnZ6KLpIKSFXYOLReTZNd\"\n",
        "show_id = \"1oMIHOXsrLFENAeM743g93\"\n",
        "market = \"BR\"\n",
        "\n",
        "# Call the function to get the show information\n",
        "get_show(show_id, market)\n"
      ],
      "metadata": {
        "id": "ExcHl1wRVYQL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Conferindo se o csv está correto e no diretorio"
      ],
      "metadata": {
        "id": "xyXhgMpOVsYa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Carregar o arquivo CSV\n",
        "df = pd.read_csv('podcast_data.csv')\n",
        "\n",
        "# Imprimir o conteúdo do DataFrame\n",
        "print(df)"
      ],
      "metadata": {
        "id": "kuhn8jgVVbWE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "# Verificar o diretório atual\n",
        "current_directory = os.getcwd()\n",
        "print(\"Diretório atual:\", current_directory)\n",
        "\n",
        "# Listar os arquivos no diretório\n",
        "files_in_directory = os.listdir()\n",
        "print(\"Arquivos no diretório:\", files_in_directory)"
      ],
      "metadata": {
        "id": "kNTKYbPLVrtY"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
